<?xml version="1.0" encoding="UTF-8"?>

<!-- 해당 xml파일이 mapper역할을 하기 위해서 반드시 필요한 Doctype -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
매퍼의 namespace속성 :
해당 매퍼파일을 호출하기 위해 정의한 인터페이스의 패키지를 포함한 풀 경로 기술
해당 인터페이스는 컨트롤러와 Mapper(DAO) 사이에서 중재자 역할을 하는 서비스객체로 사용됌

id속성 :
실제 호출되는 함수명과 동일한 이름으로 기술

resultType :
쿼리 실행 후 반환되는 값의 타입 명시
이때는 패키지명을 포함한 풀 경로를 기술해야 함

parameterType :
쿼리문에서 사용할 파라미터를 저장할 DTO 혹은 VO 객체의 타입 명시
패키지명을 포함한 풀경로 기술 필수
 -->
 <!--  
 Mapper에서의 파라미터 사용법
 
형식1)
 listPage(int s, int e)와 같이 
 추상메소드를 통해 파라미터가 전달되면
 순서대로 param1, param2로 사용 가능
 
형식2)
 인덱스를 사용하는 방법. 순서대로 0부터 시작
 {0}, {1}, ...
 
형식3)
 @Param어노테이션 사용
	@Param(_변수명)String 변수명 
	=> mapper에서는 _변수명 으로 사용 가능 

형식4)
 DTO와 같은 객체를 사용하는 방법

 -->
<!-- 
 각 엘리먼트별 반환값
 
 select:
 select문에 해당하는 결과 반환
 아래와 같이 int인 경우는 정수값을, 
 DTO객체인 경우에는 해당 레코드를 저장한 List계열의 컬렉션으로 반환
 
 insert:
 입력 성공 시 1, 실패 시 0 반환
 만약 insert가 여러 번 되더라도 성공 시에는 1 반환
 
 update/delete:
 수정/삭제에 성공한 행의 갯수가 반환됌
 조건에 따라 여러 개의 레코드가 한꺼번에 적용될 수 있으므로
 0, 1이 아닌 더 큰값이 반환될수도 있음. 실패할 경우 0 반환
 
  -->
  
<mapper namespace="mybatis.MybatisDAOImpl">

	<!-- 
	검색어처리:
	검색어가 있는 경우 동적으로 쿼리문을 변경해야 하므로 동적쿼리를 위해 <if>태그 사용
	JSTL과 사용법 동일
	 -->
	 
	 <!-- 3차 버젼 -->
	 <!-- 
	 반복을 통해 동적쿼리를 만들 때는 foreach태그 사용
	 collection: 반복에 사용할 컬렉션 객체
	 item: 반복 시 사용할 변수
	 open: 동적 쿼리문의 시작 부분
	 close: 동적 쿼리문의 종료 부분
	 separator: 반복할 때 사용할 구분자로 and, or, 콤마 등 사용 가능
	  -->
	<select id="getTotalCount" resultType="int"
		parameterType="mybatis.ParameterDTO">
		SELECT COUNT(*) FROM myboard
		<if test="searchTxt != null">
			WHERE 
			<foreach collection="searchTxt" item="str" open="(" close=")"
				separator="or">
				${searchField} like '%'||#{str}||'%'
			</foreach>
		</if>
	</select>
	
	<select id="listPage" resultType="mybatis.MyBoardDTO"
		parameterType="mybatis.ParameterDTO">
		SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM (
				SELECT * FROM myboard
				<if test="searchTxt != null">
					WHERE 
					<foreach collection="searchTxt" item="str" open="(" close=")"
						separator="or">
						${searchField} like '%'||#{str}||'%'
					</foreach>
				</if>
				 ORDER BY idx DESC
			) Tb
		) 
		WHERE rNum<![CDATA[>=]]>#{start} AND rNum<![CDATA[<=]]>#{end}
	</select>
<!-- 
	CDATA : Unparsed Character Data
	파싱되지 않은 문자데이터 의미
	Mapper에선 꺽쇠로 시작되는 모든 문자를 엘리먼트로 판단하기에
	쿼리문 사이에 비교연산자를 사용할땐 반드시 위와 같은 처리 필요
 -->
<!--
		WHERE rNum BETWEEN #{start} AND #{end}		 
-->
<!-- 
@Param 어노테이션에서 지정한 명칭을 사용하여 인파라미터 처리
일련번호는 기존 방식과 동일하게 시퀀스를 통해 부여
 -->
	<insert id="write">
		INSERT INTO myboard (idx, id, name, contents)
		VALUES
		(myboard_seq.nextval, #{_id}, #{_name}, #{_contents})
	</insert>
	
<!-- 
매개변수로 전달된 DTO객체의 멤버변수명만 명시하면
내부적으로 getter()가 호출되어 값을 얻어올 수 있음
(EL과 동일)
 -->
	<select id="view" resultType="mybatis.MyBoardDTO" parameterType="mybatis.ParameterDTO">
		SELECT * FROM myboard WHERE idx=#{board_idx} AND id=#{user_id}
	</select>

	<!-- 게시물 수정 -->
	<update id="modify" parameterType="mybatis.MyBoardDTO">
		UPDATE myboard
		 SET name=#{name}, contents=#{contents}
		 WHERE idx=#{idx} AND id=#{id}
	</update>
	
	<!--  게시물 삭제 -->
	<delete id="delete">
		DELETE FROM myboard WHERE idx=#{param1} AND id=#{param2}
	</delete>
	
<!-- 둘 다 지원: java.util.Map 또는 map  
	<select id="hashMapUse" resultType="mybatis.MyBoardDTO" parameterType="map"> 
-->
	<select id="hashMapUse" resultType="mybatis.MyBoardDTO" parameterType="java.util.Map">
		SELECT * FROM myboard
		WHERE id=#{key_id} AND name=#{key_name} or contents=#{key_contents}
		ORDER BY idx DESC
	</select>
	<!-- 
	컨트롤러에서 저장한 값
		hashMap.put("key_id", "kosmo");
		hashMap.put("key_name", "고스톱");
	 -->
	 	 
<!-- 둘 다 지원: java.util.List 또는 map  
	<select id="arrayListUse" resultType="mybatis.MyBoardDTO" parameterType="list">
-->
	<select id="arrayListUse" resultType="mybatis.MyBoardDTO" parameterType="java.util.ArrayList">
		SELECT * FROM myboard
		WHERE
		<!-- 리스트이 경우 collection="list"와 같이 파라미터명을 list로 쓰는게 룰 -->
		<foreach collection="list" item="item" index="index" open="(" close=")" separator="or">
			name=#{item}
		</foreach>
		ORDER BY idx DESC
	</select>
	<!-- 
	위의 <foreach 태그를 통해 아래와 같은 쿼리가 만들어짐
	(
		name='고스톱' or name='낙자쌤' or....
	)
	 -->
</mapper>
